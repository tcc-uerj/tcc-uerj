-- Insert initial data
insert into challenge (id, subject, level, points)
values
    (nextval('challenge_id_seq'), 'CLEAN_CODE', 'LEVEL_1', 100),
    (nextval('challenge_id_seq'), 'CLEAN_CODE', 'LEVEL_1', 100),
    (nextval('challenge_id_seq'), 'CLEAN_CODE', 'LEVEL_1', 100),
    (nextval('challenge_id_seq'), 'CLEAN_CODE', 'LEVEL_2', 200),
    (nextval('challenge_id_seq'), 'CLEAN_CODE', 'LEVEL_2', 200),
    (nextval('challenge_id_seq'), 'CLEAN_CODE', 'LEVEL_2', 200),
    (nextval('challenge_id_seq'), 'CLEAN_CODE', 'LEVEL_3', 300),
    (nextval('challenge_id_seq'), 'CLEAN_CODE', 'LEVEL_3', 300),
    (nextval('challenge_id_seq'), 'CLEAN_CODE', 'LEVEL_3', 300),
    (nextval('challenge_id_seq'), 'CLEAN_CODE', 'LEVEL_3', 300),
    (nextval('challenge_id_seq'), 'DESIGN_PATTERN', 'LEVEL_1', 100),
    (nextval('challenge_id_seq'), 'DESIGN_PATTERN', 'LEVEL_1', 100),
    (nextval('challenge_id_seq'), 'DESIGN_PATTERN', 'LEVEL_1', 100),
    (nextval('challenge_id_seq'), 'DESIGN_PATTERN', 'LEVEL_2', 200),
    (nextval('challenge_id_seq'), 'DESIGN_PATTERN', 'LEVEL_2', 200),
    (nextval('challenge_id_seq'), 'DESIGN_PATTERN', 'LEVEL_2', 200),
    (nextval('challenge_id_seq'), 'DESIGN_PATTERN', 'LEVEL_3', 300),
    (nextval('challenge_id_seq'), 'DESIGN_PATTERN', 'LEVEL_3', 300),
    (nextval('challenge_id_seq'), 'DESIGN_PATTERN', 'LEVEL_3', 300),
    (nextval('challenge_id_seq'), 'DESIGN_PATTERN', 'LEVEL_3', 300);

insert into challenge_question (id, challenge_id, statement_title, statement_code, type)
values
    (nextval('challenge_question_id_seq'), 1, 'Princípio do SOLID', 'Qual princípio do SOLID afirma que uma classe deve ter apenas uma razão para mudar? Esse princípio incentiva a separação de preocupações, garantindo que uma classe tenha apenas uma responsabilidade.', 'QUIZ'),
    (nextval('challenge_question_id_seq'), 2, 'Boa prática para nomear variáveis', 'Qual é uma boa prática para nomear variáveis em clean code? Escolher nomes descritivos para variáveis é uma prática fundamental em programação, pois torna o código mais legível e compreensível.', 'QUIZ'),
    (nextval('challenge_question_id_seq'), 3, 'Princípio fundamental do clean code', 'Qual é um dos princípios fundamentais do clean code que enfatiza a importância de manter o código legível para humanos? Este princípio defende a ideia de que o código deve ser simples e fácil de entender, mesmo para quem não o escreveu.', 'QUIZ'),
    (nextval('challenge_question_id_seq'), 4, 'Benefícios de escrever código limpo', 'Qual dos seguintes NÃO é um benefício de escrever código limpo? Escrever código limpo traz diversos benefícios para o desenvolvimento de software, mas um dos itens abaixo não é um desses benefícios.', 'QUIZ'),
    (nextval('challenge_question_id_seq'), 5, 'DRY (Don''t Repeat Yourself)', 'O que é DRY (Don''t Repeat Yourself) em clean code? DRY é um dos princípios fundamentais do clean code que enfatiza a importância de evitar a duplicação de código.', 'QUIZ'),
    (nextval('challenge_question_id_seq'), 6, 'Expressão "Código limpo faz bem uma coisa"', 'O que significa a expressão "Código limpo faz bem uma coisa"? Essa expressão refere-se a um dos princípios do clean code que incentiva a coesão e a simplicidade das funções ou métodos.', 'QUIZ'),
    (nextval('challenge_question_id_seq'), 7, 'Ideia principal do conceito de "code smells"', 'Qual é uma das principais ideias por trás do conceito de "code smells"? Code smells são indícios ou sinais que podem indicar problemas no código, e entender sua origem é fundamental para escrever um código limpo e de qualidade.', 'QUIZ'),
    (nextval('challenge_question_id_seq'), 8, 'Importância de manter funções curtas em clean code', 'Por que é importante manter funções curtas em clean code? Funções curtas são uma prática recomendada no clean code porque trazem diversos benefícios para a legibilidade e manutenibilidade do código.', 'QUIZ'),
    (nextval('challenge_question_id_seq'), 9, 'Técnica do Test-Driven Development (TDD)', 'Qual é uma das técnicas usadas para escrever testes que sigam os princípios do TDD (Test-Driven Development)? O TDD é uma metodologia de desenvolvimento que preconiza a escrita de testes antes da implementação do código de produção.', 'QUIZ'),
    (nextval('challenge_question_id_seq'), 10, 'Manter o código limpo em relação à formatação', 'Qual é uma das formas de manter o código limpo em relação à formatação? Manter uma formatação consistente e legível é uma prática importante para garantir a qualidade do código.', 'QUIZ'),
    (nextval('challenge_question_id_seq'), 11, 'Design pattern para criar objetos sem especificar a classe exata', 'Qual design pattern é usado para criar objetos sem especificar a classe exata do objeto que será criado? Este padrão permite a criação de objetos sem precisar saber a classe concreta do objeto.', 'QUIZ'),
    (nextval('challenge_question_id_seq'), 12, 'Design pattern para garantir apenas uma instância de uma classe', 'Qual design pattern é usado para garantir que uma classe tenha apenas uma instância e forneça um ponto global de acesso a essa instância? Esse padrão de design é útil quando é necessário garantir que uma classe tenha apenas uma instância durante toda a execução do programa.', 'QUIZ'),
    (nextval('challenge_question_id_seq'), 13, 'Benefício do padrão de design Factory Method', 'O que é um dos benefícios de usar o padrão de design Factory Method? O Factory Method é um padrão de design que oferece diversos benefícios em relação à criação de objetos em uma aplicação.', 'QUIZ'),
    (nextval('challenge_question_id_seq'), 14, 'Design pattern para encapsular uma família de algoritmos', 'Qual design pattern é mais adequado quando há uma família de algoritmos e é necessário encapsular cada algoritmo e torná-los intercambiáveis? Esse padrão de design é útil quando há a necessidade de encapsular uma família de algoritmos e permitir que eles sejam intercambiáveis.', 'QUIZ'),
    (nextval('challenge_question_id_seq'), 15, 'Design pattern para delegar a responsabilidade de criação de objetos para subclasses', 'Qual design pattern é usado para fornecer uma interface para criar objetos em uma superclasse, mas permite que subclasses alterem o tipo de objetos que serão criados? Esse padrão de design é útil quando é necessário delegar a responsabilidade de criação de objetos para subclasses.', 'QUIZ'),
    (nextval('challenge_question_id_seq'), 16, 'Princípio do padrão de design Singleton', 'O que é um dos princípios do padrão de design Singleton? O Singleton é um padrão de design amplamente utilizado que possui alguns princípios importantes a serem seguidos.', 'QUIZ'),
    (nextval('challenge_question_id_seq'), 17, 'Separar lógica de negócios da lógica de apresentação', 'Qual design pattern é usado para separar a lógica de negócios da lógica de apresentação, permitindo que ambas sejam modificadas independentemente uma da outra? Esse padrão de design é amplamente utilizado em aplicações para separar a lógica de negócios da lógica de apresentação.', 'QUIZ'),
    (nextval('challenge_question_id_seq'), 18, 'Encapsular solicitações como objetos', 'Qual design pattern é usado para encapsular solicitações como objetos, permitindo que os parâmetros de clientes sejam parametrizados com solicitações e que as operações de solicitação possam ser desfeitas ou refeitas? Esse padrão de design é útil quando é necessário encapsular solicitações como objetos e permitir que elas sejam desfeitas ou refeitas.', 'QUIZ'),
    (nextval('challenge_question_id_seq'), 19, 'Interface para criar objeto em uma superclasse', 'Qual design pattern é usado para definir uma interface para criar um objeto em uma superclasse, mas permite que subclasses alterem o tipo de objeto que será instanciado? Esse padrão de design é útil quando é necessário fornecer uma interface para criar objetos em uma superclasse, mas permitir que subclasses alterem o tipo de objeto que será instanciado.', 'QUIZ'),
    (nextval('challenge_question_id_seq'), 20, 'Padrão de design em frameworks de desenvolvimento web', 'Qual padrão de design é frequentemente utilizado em frameworks de desenvolvimento web para implementar mecanismos de inversão de controle? Esse padrão de design é amplamente utilizado em frameworks de desenvolvimento web para implementar mecanismos de inversão de controle.', 'QUIZ');


insert into question_quiz (id, quiz, is_correct_answer, challenge_question_id)
values
    (nextval('question_quiz_id_seq'), 'Single Responsibility Principle (SRP)', true, 1),
    (nextval('question_quiz_id_seq'), 'Open/Closed Principle (OCP)', false, 1),
    (nextval('question_quiz_id_seq'), 'Liskov Substitution Principle (LSP)', false, 1),
    (nextval('question_quiz_id_seq'), 'Interface Segregation Principle (ISP)', false, 1),
    (nextval('question_quiz_id_seq'), 'Escolher nomes descritivos que indiquem a intenção da variável', true, 2),
    (nextval('question_quiz_id_seq'), 'Usar nomes curtos e ambíguos', false, 2),
    (nextval('question_quiz_id_seq'), 'Não se preocupar muito com o nome das variáveis', false, 2),
    (nextval('question_quiz_id_seq'), 'Utilizar abreviações sempre que possível', false, 2),
    (nextval('question_quiz_id_seq'), 'Keep It Simple, Stupid (KISS)', true, 3),
    (nextval('question_quiz_id_seq'), 'Don''t Repeat Yourself (DRY)', false, 3),
    (nextval('question_quiz_id_seq'), 'You Aren''t Gonna Need It (YAGNI)', false, 3),
    (nextval('question_quiz_id_seq'), 'Boy Scout Rule', false, 3),
    (nextval('question_quiz_id_seq'), 'Facilidade de manutenção e extensão', true, 4),
    (nextval('question_quiz_id_seq'), 'Redução de bugs', false, 4),
    (nextval('question_quiz_id_seq'), 'Melhor compreensão do código por parte dos desenvolvedores', false, 4),
    (nextval('question_quiz_id_seq'), 'Aumento do tempo de compilação', false, 4),
    (nextval('question_quiz_id_seq'), 'Um princípio que recomenda repetir código sempre que possível', false, 5),
    (nextval('question_quiz_id_seq'), 'Uma prática que sugere evitar duplicação de código', true, 5),
    (nextval('question_quiz_id_seq'), 'Uma técnica para tornar o código mais complicado', false, 5),
    (nextval('question_quiz_id_seq'), 'Uma abordagem para criar código longo e repetitivo', false, 5),
    (nextval('question_quiz_id_seq'), 'Cada método deve realizar apenas uma tarefa e fazê-la bem', true, 6),
    (nextval('question_quiz_id_seq'), 'Cada método deve realizar múltiplas tarefas para ser eficiente', false, 6),
    (nextval('question_quiz_id_seq'), 'Cada classe deve ter múltiplas responsabilidades para evitar duplicação de código', false, 6),
    (nextval('question_quiz_id_seq'), 'Cada classe deve ser complexa o suficiente para cobrir todos os casos de uso possíveis', false, 6),
    (nextval('question_quiz_id_seq'), 'Identificar padrões de design comuns', false, 7),
    (nextval('question_quiz_id_seq'), 'Reconhecer práticas de programação questionáveis que podem indicar problemas no código', true, 7),
    (nextval('question_quiz_id_seq'), 'Identificar trechos de código muito eficientes', false, 7),
    (nextval('question_quiz_id_seq'), 'Padronizar a formatação do código fonte', false, 7),
    (nextval('question_quiz_id_seq'), 'Funções curtas aumentam a complexidade do código', false, 8),
    (nextval('question_quiz_id_seq'), 'Funções curtas dificultam a compreensão do código', false, 8),
    (nextval('question_quiz_id_seq'), 'Funções curtas são mais fáceis de testar e manter', true, 8),
    (nextval('question_quiz_id_seq'), 'Funções curtas não têm impacto na qualidade do código', false, 8),
    (nextval('question_quiz_id_seq'), 'Escrever testes apenas após a implementação do código', false, 9),
    (nextval('question_quiz_id_seq'), 'Escrever testes antes de escrever o código de produção', true, 9),
    (nextval('question_quiz_id_seq'), 'Não escrever testes, confiando na qualidade do código', false, 9),
    (nextval('question_quiz_id_seq'), 'Escrever testes apenas para casos de uso específicos, ignorando os outros casos', false, 9),
    (nextval('question_quiz_id_seq'), 'Não se preocupar com a indentação e espaçamento', false, 10),
    (nextval('question_quiz_id_seq'), 'Seguir um guia de estilo de código consistente', true, 10),
    (nextval('question_quiz_id_seq'), 'Utilizar diferentes estilos de formatação em diferentes partes do código', false, 10),
    (nextval('question_quiz_id_seq'), 'Deixar comentários desnecessários para explicar a formatação do código', false, 10),
    (nextval('question_quiz_id_seq'), 'Factory Method', false, 11),
    (nextval('question_quiz_id_seq'), 'Abstract Factory', true, 11),
    (nextval('question_quiz_id_seq'), 'Singleton', false, 11),
    (nextval('question_quiz_id_seq'), 'Prototype', false, 11),
    (nextval('question_quiz_id_seq'), 'Singleton', true, 12),
    (nextval('question_quiz_id_seq'), 'Factory Method', false, 12),
    (nextval('question_quiz_id_seq'), 'Builder', false, 12),
    (nextval('question_quiz_id_seq'), 'Adapter', false, 12),
    (nextval('question_quiz_id_seq'), 'Facilita a criação de objetos sem a necessidade de subclasses', true, 13),
    (nextval('question_quiz_id_seq'), 'Garante que apenas uma instância de uma classe seja criada', false, 13),
    (nextval('question_quiz_id_seq'), 'Fornece um ponto global de acesso a uma instância de classe', false, 13),
    (nextval('question_quiz_id_seq'), 'Encapsula a lógica de criação de objetos em uma única classe', false, 13),
    (nextval('question_quiz_id_seq'), 'Strategy', true, 14),
    (nextval('question_quiz_id_seq'), 'Observer', false, 14),
    (nextval('question_quiz_id_seq'), 'Decorator', false, 14),
    (nextval('question_quiz_id_seq'), 'Proxy', false, 14),
    (nextval('question_quiz_id_seq'), 'Factory Method', true, 15),
    (nextval('question_quiz_id_seq'), 'Builder', false, 15),
    (nextval('question_quiz_id_seq'), 'Abstract Factory', false, 15),
    (nextval('question_quiz_id_seq'), 'Singleton', false, 15),
    (nextval('question_quiz_id_seq'), 'Garantir que uma classe tenha apenas uma instância e fornecer um ponto global de acesso a ela', true, 16),
    (nextval('question_quiz_id_seq'), 'Permitir que objetos sejam criados sem especificar a classe exata do objeto', false, 16),
    (nextval('question_quiz_id_seq'), 'Encapsular a lógica de criação de objetos em uma superclasse', false, 16),
    (nextval('question_quiz_id_seq'), 'Permitir que objetos sejam substituídos por outros em tempo de execução', false, 16),
    (nextval('question_quiz_id_seq'), 'MVC (Model-View-Controller)', true, 17),
    (nextval('question_quiz_id_seq'), 'Observer', false, 17),
    (nextval('question_quiz_id_seq'), 'Adapter', false, 17),
    (nextval('question_quiz_id_seq'), 'Command', false, 17),
    (nextval('question_quiz_id_seq'), 'Command', true, 18),
    (nextval('question_quiz_id_seq'), 'Memento', false, 18),
    (nextval('question_quiz_id_seq'), 'State', false, 18),
    (nextval('question_quiz_id_seq'), 'Visitor', false, 18),
    (nextval('question_quiz_id_seq'), 'Abstract Factory', true, 19),
    (nextval('question_quiz_id_seq'), 'Singleton', false, 19),
    (nextval('question_quiz_id_seq'), 'Factory Method', false, 19),
    (nextval('question_quiz_id_seq'), 'Prototype', false, 19),
    (nextval('question_quiz_id_seq'), 'Dependency Injection', true, 20),
    (nextval('question_quiz_id_seq'), 'Singleton', false, 20),
    (nextval('question_quiz_id_seq'), 'Proxy', false, 20),
    (nextval('question_quiz_id_seq'), 'Observer', false, 20);