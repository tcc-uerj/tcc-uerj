generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model User {
    id         Int    @id @default(autoincrement()) @db.Integer
    email      String @db.Text
    password   String @db.Text
    name       String @db.Text
    points     Int    @default(0) @db.SmallInt
    level      Int    @default(1) @db.SmallInt
    gamesCount Int    @default(0) @map("games_count") @db.SmallInt

    userLessonLinks  UserLessonLink[]
    userAchievements UserAchievement[]
    userChallenges   UserChallenge[]
    userLessons      UserLesson[]

    @@map("users")
}

model Lesson {
    id          Int    @id @default(autoincrement()) @db.Integer
    subject     String @db.Text
    content     String @db.Text
    description String @db.Text
    imageUrl    String @map("image_url") @db.Text
    challengeId Int    @map("challenge_id") @db.Integer

    lessonLinks LessonLink[]
    challenge   Challenge    @relation(fields: [challengeId], references: [id])
    userLessons UserLesson[]

    @@map("lesson")
}

model LessonLink {
    id       Int    @id @default(autoincrement()) @db.Integer
    link     String @db.Text
    lessonId Int    @map("lesson_id") @db.Integer
    order    Int    @db.SmallInt
    type     String @db.Text

    lesson          Lesson           @relation(fields: [lessonId], references: [id])
    userLessonLinks UserLessonLink[]

    @@map("lesson_link")
}

model UserLesson {
    id                 Int     @id @default(autoincrement()) @db.Integer
    userId             Int     @map("user_id") @db.Integer
    lessonId           Int     @map("lesson_id") @db.Integer
    challengeCompleted Boolean @map("challenge_completed") @db.Boolean

    user   User   @relation(fields: [userId], references: [id])
    lesson Lesson @relation(fields: [lessonId], references: [id])

    @@map("user_lesson")
}

model UserLessonLink {
    id           Int       @id @default(autoincrement()) @db.Integer
    userId       Int       @map("user_id") @db.Integer
    lessonLinkId Int       @map("lesson_link_id") @db.Integer
    completedAt  DateTime? @map("completed_at") @db.Timestamp()

    user       User       @relation(fields: [userId], references: [id])
    lessonLink LessonLink @relation(fields: [lessonLinkId], references: [id])

    @@map("user_lesson_link")
}

model Achievement {
    id          Int    @id @default(autoincrement()) @db.Integer
    type        String @db.Text
    description String @db.Text

    userAchievements UserAchievement[]

    @@map("achievement")
}

model UserAchievement {
    id            Int @id @default(autoincrement()) @db.Integer
    userId        Int @map("user_id") @db.Integer
    achievementId Int @map("achievement_id") @db.Integer

    user        User        @relation(fields: [userId], references: [id])
    achievement Achievement @relation(fields: [achievementId], references: [id])

    @@map("user_achievement")
}

model Challenge {
    id      Int    @id @default(autoincrement()) @db.Integer
    subject String @db.Text
    level   String @db.Text
    points  Int    @db.SmallInt

    userChallenges     UserChallenge[]
    challengeQuestions ChallengeQuestion[]
    Lesson             Lesson[]

    @@map("challenge")
}

model UserChallenge {
    id          Int       @id @default(autoincrement()) @db.Integer
    userId      Int       @map("user_id") @db.Integer
    challengeId Int       @map("challenge_id") @db.Integer
    completedAt DateTime? @map("completed_at") @db.Timestamp()

    user      User      @relation(fields: [userId], references: [id])
    challenge Challenge @relation(fields: [challengeId], references: [id])

    @@map("user_challenge")
}

model ChallengeQuestion {
    id             Int    @id @default(autoincrement()) @db.Integer
    challengeId    Int    @map("challenge_id") @db.Integer
    statementTitle String @map("statement_title") @db.Text
    statementCode  String @map("statement_code") @db.Text
    type           String @db.Text

    challenge       Challenge         @relation(fields: [challengeId], references: [id])
    questionOptions QuestionOptions[]

    @@map("challenge_question")
}

model QuestionOptions {
    id                  Int     @id @default(autoincrement()) @db.Integer
    quiz                String  @db.Text
    isCorrectAnswer     Boolean @map("is_correct_answer")
    challengeQuestionId Int     @map("challenge_question_id") @db.Integer

    challengeQuestion ChallengeQuestion @relation(fields: [challengeQuestionId], references: [id])

    @@map("question_options")
}

model HangmanQuestions {
    id      Int    @id @default(autoincrement()) @db.Integer
    answer  String @db.Text
    hint    String @db.Text
    subject String @db.Text
    points  Int    @db.SmallInt

    @@map("hangman_questions")
}
